"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent } from "@/components/ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import ReactMarkdown from "react-markdown";
import { Loader2 } from "lucide-react";

export default function BlogWritingPage() {
  const [content, setContent] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [aiPrompt, setAiPrompt] = useState("");
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const handleContentChange = (
    event: React.ChangeEvent<HTMLTextAreaElement>
  ) => {
    setContent(event.target.value);
  };

  const handlePromptChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setAiPrompt(event.target.value);
  };

  const handleGenerateContent = async () => {
    setIsGenerating(true);
    setIsDialogOpen(false);
    // Simulating AI generation with a timeout
    await new Promise((resolve) => setTimeout(resolve, 2000));
    setContent(
      `# AI Generated Blog Post based on: "${aiPrompt}"\n\nThis is a sample blog post generated by AI based on your prompt. It demonstrates various Markdown features:\n\n## Key Points\n\n- Point related to "${aiPrompt}"\n- Another relevant point\n\n### Example\n\n\`\`\`\nSample code or quote related to "${aiPrompt}"\n\`\`\`\n\nRemember to replace this with actual AI integration in a real application.`
    );
    setIsGenerating(false);
    setAiPrompt("");
  };

  return (
    <div className="container mx-auto p-4 max-w-4xl">
      <h1 className="text-3xl font-bold mb-6">Write Your Blog Post</h1>
      <Tabs defaultValue="write" className="w-full">
        <TabsList className="grid w-full grid-cols-2 mb-4">
          <TabsTrigger value="write">Write</TabsTrigger>
          <TabsTrigger value="preview">Preview</TabsTrigger>
        </TabsList>
        <TabsContent value="write">
          <Card>
            <CardContent className="p-4">
              <Textarea
                placeholder="Write your blog post in Markdown format..."
                value={content}
                onChange={handleContentChange}
                className="min-h-[400px] mb-4"
              />
              <div className="flex justify-between items-center">
                <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
                  <DialogTrigger asChild>
                    <Button>Generate with AI</Button>
                  </DialogTrigger>
                  <DialogContent className="sm:max-w-[425px]">
                    <DialogHeader>
                      <DialogTitle>Generate AI Content</DialogTitle>
                    </DialogHeader>
                    <div className="grid gap-4 py-4">
                      <div className="grid grid-cols-4 items-center gap-4">
                        <Label htmlFor="prompt" className="text-right">
                          Prompt
                        </Label>
                        <Input
                          id="prompt"
                          value={aiPrompt}
                          onChange={handlePromptChange}
                          className="col-span-3"
                          placeholder="Enter a prompt for AI generation..."
                        />
                      </div>
                    </div>
                    <Button
                      onClick={handleGenerateContent}
                      disabled={isGenerating || !aiPrompt.trim()}
                    >
                      {isGenerating ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Generating...
                        </>
                      ) : (
                        "Generate"
                      )}
                    </Button>
                  </DialogContent>
                </Dialog>
                <span className="text-sm text-muted-foreground">
                  {content.length} characters
                </span>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
        <TabsContent value="preview">
          <Card>
            <CardContent className="prose dark:prose-invert max-w-none p-4">
              <ReactMarkdown>{content}</ReactMarkdown>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}
